const http = require("http");
const WebSocket = require("ws");
const express = require("express");

const app = express();
const server = http.createServer(app);
const wss = new WebSocket.Server({ server });

// Dient statischen Dateien aus dem 'public' Ordner, falls Sie die index.html auf Render hosten.
app.use(express.static('public')); 

let waiting = null; // Speichert den einen wartenden Client
const pairs = new Map(); // Speichert, wer mit wem verbunden ist

wss.on("connection", (ws) => {
Â  Â  console.log("ğŸ”— Neuer Client verbunden");

Â  Â  ws.on("message", (msg) => {
Â  Â  Â  Â  const data = JSON.parse(msg);

Â  Â  Â  Â  // --- START-Logik: Sucht einen Partner (ersetzt 'join') ---
Â  Â  Â  Â  if (data.type === "start") {
Â  Â  Â  Â  Â  Â  if (waiting && waiting !== ws) {
Â  Â  Â  Â  Â  Â  Â  Â  // Match gefunden

Â  Â  Â  Â  Â  Â  Â  Â  const caller = ws;        // Der Client, der gerade gestartet hat, wird der Anrufer (Offer)
Â  Â  Â  Â  Â  Â  Â  Â  const answerer = waiting; // Der wartende Client wird der Antworter (Answer)

Â  Â  Â  Â  Â  Â  Â  Â  pairs.set(caller, answerer);
Â  Â  Â  Â  Â  Â  Â  Â  pairs.set(answerer, caller);
Â  Â  Â  Â  Â  Â  Â  Â  waiting = null; // Warteschlange leeren

Â  Â  Â  Â  Â  Â  Â  Â  // 1. Signal an den Caller: Erstelle Offer (soll_angebot_machen: true)
Â  Â  Â  Â  Â  Â  Â  Â  caller.send(JSON.stringify({ type: "matched", should_offer: true })); 
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  // 2. Signal an den Answerer: Warte auf Offer (soll_angebot_machen: false)
Â  Â  Â  Â  Â  Â  Â  Â  answerer.send(JSON.stringify({ type: "matched", should_offer: false }));
Â  Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Â  Â  // Keinen Partner gefunden, in die Warteschlange stellen
Â  Â  Â  Â  Â  Â  Â  Â  waiting = ws;
Â  Â  Â  Â  Â  Â  Â  Â  ws.send(JSON.stringify({ type: "no-match" }));
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }

Â  Â  Â  Â  // --- NEXT- und STOP-Logik ---
Â  Â  Â  Â  else if (data.type === "next" || data.type === "stop") {
Â  Â  Â  Â  Â  Â  const partner = pairs.get(ws);
Â  Â  Â  Â  Â  Â  if (partner) {
Â  Â  Â  Â  Â  Â  Â  Â  pairs.delete(ws);
Â  Â  Â  Â  Â  Â  Â  Â  pairs.delete(partner);
Â  Â  Â  Â  Â  Â  Â  Â  partner.send(JSON.stringify({ type: "partner-left" }));
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  // Bei 'next' startet der Client eine neue Suche mit 'start'
Â  Â  Â  Â  Â  Â  if (data.type === "stop" && waiting === ws) waiting = null;
Â  Â  Â  Â  }

Â  Â  Â  Â  // --- WEBRTC SIGNALING LOGIC ---
Â  Â  Â  Â  else if (["offer", "answer", "candidate"].includes(data.type)) {
Â  Â  Â  Â  Â  Â  const partner = pairs.get(ws);
Â  Â  Â  Â  Â  Â  if (partner && partner.readyState === WebSocket.OPEN) {
Â  Â  Â  Â  Â  Â  Â  Â  partner.send(JSON.stringify(data));
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  });

Â  Â  ws.on("close", () => {
Â  Â  Â  Â  const partner = pairs.get(ws);
Â  Â  Â  Â  if (partner) {
Â  Â  Â  Â  Â  Â  pairs.delete(ws);
Â  Â  Â  Â  Â  Â  pairs.delete(partner);
Â  Â  Â  Â  Â  Â  if (partner.readyState === WebSocket.OPEN) {
Â  Â  Â  Â  Â  Â  Â  Â  partner.send(JSON.stringify({ type: "partner-left" }));
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  Â  Â  if (waiting === ws) waiting = null;
Â  Â  Â  Â  console.log("ğŸ”— Client getrennt");
Â  Â  });
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => console.log(`ğŸš€ Signalisierungsserver lÃ¤uft auf Port ${PORT}`));
